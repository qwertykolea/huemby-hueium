name: Patch Emby Server DEB

on:
  workflow_dispatch:  # Ручной запуск
  schedule:
    - cron: '0 2 * * 0'  # Еженедельно по воскресеньям в 2:00 UTC

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'  # Совместимо с Emby 4.9.x

    - name: Install tools
      run: |
        sudo apt-get update -y
        sudo apt-get install -y dpkg wget curl mono-complete build-essential
        dotnet tool install -g dotnet-script --version 1.2.0
        export PATH="$PATH:/home/runner/.dotnet/tools"
        echo "Tools check:"
        which dotnet || echo "dotnet not found"
        which dpkg-deb || echo "dpkg-deb not found"
        which mono || echo "mono not found"
      shell: bash

    - name: Download Emby DEB
      run: |
        VERSION="4.9.2.6"
        DOWNLOAD_URL="https://github.com/MediaBrowser/Emby.Releases/releases/download/${VERSION}/emby-server-deb_${VERSION}_amd64.deb"
        echo "Downloading from: $DOWNLOAD_URL"
        wget "$DOWNLOAD_URL" -O emby-server.deb || { echo "Download failed"; exit 1; }
        ls -lh emby-server.deb
        file emby-server.deb

    - name: Extract DEB
      run: |
        mkdir -p extracted
        dpkg-deb -x emby-server.deb extracted || { echo "Extraction failed"; ls -la; exit 1; }
        dpkg-deb -e emby-server.deb extracted/DEBIAN || { echo "Control extraction failed"; exit 1; }
        echo "Extracted structure:"
        find extracted -type f | head -20

    - name: Patch JS files (connectionmanager.js)
      run: |
        JS_PATH="extracted/opt/emby-server/system/dashboard-ui/modules/emby-apiclient/connectionmanager.js"
        if [ -f "$JS_PATH" ]; then
          echo "Patching $JS_PATH"
          sed -i 's|https://mb3admin.com/admin/service|https://your-crackemby-domain.workers.dev|g' "$JS_PATH" || { echo "Sed failed"; exit 1; }
          echo '// Fallback for validation
          if (url.includes("validateDevice")) {
            return Promise.resolve({ registered: true, expDate: "2099-01-01", key: "" });
          }' >> "$JS_PATH"
          grep -n "your-crackemby-domain\|validateDevice" "$JS_PATH"
        else
          echo "Warning: $JS_PATH not found"
          find extracted -name "connectionmanager.js"
        fi

    - name: Patch .NET DLL (simplified hex patch)
      run: |
        DLL_PATH="extracted/opt/emby-server/system/MediaBrowser.Model.dll"
        if [ -f "$DLL_PATH" ]; then
          echo "Patching $DLL_PATH for IsMBSupporter = true"
          cp "$DLL_PATH" "$DLL_PATH.bak"
          # Простой hex-патч: Ищем байты для ldc.i4.0 (false) и меняем на ldc.i4.1 (true)
          # Заменяем через strings и sed как временное решение
          strings "$DLL_PATH" | grep -q "IsMBSupporter" && sed -i 's/ldc.i4.0/ldc.i4.1/' "$DLL_PATH" || echo "No IsMBSupporter method found"
        else
          echo "Warning: $DLL_PATH not found"
          find extracted -name "MediaBrowser.Model.dll"
        fi
      # Строка 72 могла быть здесь — проверь, нет ли лишнего отступа или команды

    - name: Repack DEB
      run: |
        OUTPUT_DEB="emby-server-patched_${{ github.run_number }}_amd64.deb"
        dpkg-deb -b extracted "$OUTPUT_DEB" || { echo "Repack failed"; ls -la extracted; exit 1; }
        ls -lh "$OUTPUT_DEB"
        echo "DEB checksum: $(md5sum "$OUTPUT_DEB")"

    - name: Upload patched DEB as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: patched-emby-deb
        path: emby-server-patched_*.deb
        retention-days: 7

    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-logs
        path: |
          extracted/
          emby-server.deb
        retention-days: 7
